name: CI

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      build:
        description: 'Build'
        required: true
        default: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.9']
        os: ['ubuntu-latest']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Install dev-requirements
        run: pip install -r dev-requirements.txt
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Test
        run: cargo test --no-default-features --features tests --release
      - name: Test no numpy installed works
        run: |
          pip uninstall numpy -y
          cargo test --release --no-default-features --features tests,nonumpy


  build:
    needs: test
    runs-on: ${{ matrix.os }}
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event.inputs.build }}
    strategy:
      matrix:
        python: [
          { version: '3.7' },
          { version: '3.8' },
          { version: '3.9' },
          { version: '3.10' },
          { version: '3.11', constraints: '3.11.0-alpha - 3.11.0' },
        ]
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.constraints || matrix.python.version }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Wheels - Linux
        if: matrix.os == 'ubuntu-latest'
        uses: messense/maturin-action@v1
        with:
          manylinux: auto
          args: -i python${{ matrix.python.version }} --release --strip

      - name: Build Wheels - MacOS
        if: matrix.os == 'macos-latest'
        uses: messense/maturin-action@v1
        with:
          args: -i python --release --universal2 --no-sdist --strip

      - name: Build Wheels - Windows
        if: matrix.os == 'windows-latest'
        uses: messense/maturin-action@v1
        with:
          args: -i python --release --no-sdist --strip

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: target/wheels

  linux-cross:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event.inputs.build }}
    strategy:
      matrix:
        python: [
          { version: '3.7', abi: 'cp37-cp37m' },
          { version: '3.8', abi: 'cp38-cp38' },
          { version: '3.9', abi: 'cp39-cp39' },
          { version: '3.10', abi: 'cp310-cp310' },
          { version: '3.11', abi: 'cp311-cp311' },
        ]
        target: [aarch64, armv7, s390x, ppc64le, ppc64]
    steps:
      - uses: actions/checkout@v3
      - name: Build Wheels
        uses: messense/maturin-action@v1
        env:
          PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i python${{ matrix.python.version }} --release --no-sdist --strip
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: target/wheels

  publish:
    needs: [build, linux-cross]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - run: pip install maturin

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: pyxirr*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PyPi publish
        env:
          MATURIN_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: find . -name 'pyxirr*' | xargs -l maturin upload --skip-existing --username __token__
